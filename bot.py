import logging
import os
import random
import sqlite3
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from dotenv import load_dotenv
import asyncio

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –∑ .env —Ñ–∞–π–ª—É
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
DB_PATH = os.getenv("DB_PATH", "user.db")  # –í–∫–∞–∑—É—î–º–æ —à–ª—è—Ö –¥–æ —ñ—Å–Ω—É—é—á–æ—ó –±–∞–∑–∏
PIXABAY_API_KEY = os.getenv("PIXABAY_API_KEY")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±'—î–∫—Ç—ñ–≤ Bot —ñ Dispatcher
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()  # Dispatcher –±–µ–∑ –ø–µ—Ä–µ–¥–∞—á—ñ bot –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite
def create_table():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER UNIQUE,
        first_name TEXT,
        last_name TEXT,
        username TEXT
    )
    """)
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü—ñ—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def add_user(user_id, first_name, last_name, username):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
    INSERT OR IGNORE INTO users (user_id, first_name, last_name, username)
    VALUES (?, ?, ?, ?)
    """, (user_id, first_name, last_name, username))
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ –∑ Pixabay
def get_random_image():
    url = f"https://pixabay.com/api/?key={PIXABAY_API_KEY}&q=happy&image_type=photo&per_page=3"
    response = requests.get(url)
    data = response.json()
    if data["hits"]:
        image_url = random.choice(data["hits"])["webformatURL"]
        return image_url
    return None

# –°–ø–∏—Å–æ–∫ –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —Ñ—Ä–∞–∑
random_phrases = [
    "–ü—Ä–∏–≤—ñ—Ç, –¥—Ä—É–∂–µ! –°–ø–æ–¥—ñ–≤–∞—é—Å—å, —É —Ç–µ–±–µ —á—É–¥–æ–≤–∏–π –¥–µ–Ω—å! üòä",
    "–ß–∞—Å –¥–ª—è –≥–∞—Ä–Ω–æ–≥–æ —Ñ–æ—Ç–æ! –ù–∞–¥—ñ—é—Å—å, –≤–æ–Ω–æ —Ç–æ–±—ñ —Å–ø–æ–¥–æ–±–∞—î—Ç—å—Å—è! üì∏",
    "–ë–∞–∂–∞—é —Ç–æ–±—ñ –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ! –¢—Ä–∏–º–∞–π –≥–∞—Ä–Ω–µ —Ñ–æ—Ç–æ! üåü",
    "–°–ø–æ–¥—ñ–≤–∞—é—Å—è, —Ü–µ–π –º–æ–º–µ–Ω—Ç –∑—Ä–æ–±–∏—Ç—å —Ç–≤—ñ–π –¥–µ–Ω—å –∫—Ä–∞—â–µ! üíñ"
]

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ –∑ —Ñ—Ä–∞–∑–æ—é
async def send_random_photo_with_phrase(message: types.Message):
    photo_url = get_random_image()
    phrase = random.choice(random_phrases)
    if photo_url:
        markup = InlineKeyboardMarkup().add(
            InlineKeyboardButton("üòç –õ–∞–π–∫", callback_data="like"),
            InlineKeyboardButton("üò≤ –£—Ö —Ç–∏!", callback_data="wow")
        )
        await message.answer_photo(photo_url, caption=phrase, reply_markup=markup)
    else:
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ñ–æ—Ç–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    username = message.from_user.username
    add_user(user_id, first_name, last_name, username)
    await message.answer(f"–ü—Ä–∏–≤—ñ—Ç, {first_name}! –Ø –±–æ—Ç, –≥–æ—Ç–æ–≤–∏–π –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Ç–æ–±—ñ —Ä–∞–Ω–¥–æ–º–Ω—ñ —Ñ–æ—Ç–æ.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–æ—Ç–æ
async def send_photo_handler(message: types.Message):
    await send_random_photo_with_phrase(message)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–æ—Ç–æ –Ω–µ–≥–∞–π–Ω–æ
async def send_now_handler(message: types.Message):
    await send_random_photo_with_phrase(message)

# –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏
scheduler = AsyncIOScheduler()

@scheduler.scheduled_job(IntervalTrigger(hours=1))
async def scheduled_photo_send():
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()
    conn.close()
    
    for user in users:
        user_id = user[0]
        try:
            photo_url = get_random_image()
            phrase = random.choice(random_phrases)
            if photo_url:
                await bot.send_photo(user_id, photo_url, caption=phrase)
        except Exception as e:
            logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ (—Ä–µ–∞–∫—Ü—ñ—ó)
@dp.callback_query_handler(lambda c: c.data in ["like", "wow"])
async def process_callback(callback_query: types.CallbackQuery):
    reaction = callback_query.data
    if reaction == "like":
        await bot.answer_callback_query(callback_query.id, text="–¢–∏ –ª–∞–π–∫–Ω—É–≤ —Ü–µ —Ñ–æ—Ç–æ! ‚ù§Ô∏è")
    elif reaction == "wow":
        await bot.answer_callback_query(callback_query.id, text="–í–∞—É! –¶–µ –Ω–µ–π–º–æ–≤—ñ—Ä–Ω–æ! üò≤")

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º—É —Ü–∏–∫–ª—ñ
async def on_start():
    create_table()  # –ü–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è, —â–æ —Ç–∞–±–ª–∏—Ü—è —î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –≤ —Ü–∏–∫–ª—ñ –ø–æ–¥—ñ–π
    scheduler.start()
    await dp.start_polling()

# –†–µ–≥—ñ—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ–º–∞–Ω–¥
dp.message(commands=["start"])(start_handler)  # –û–Ω–æ–≤–ª–µ–Ω–∏–π –º–µ—Ç–æ–¥ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
dp.message(commands=["sendphoto"])(send_photo_handler)
dp.message(commands=["sendnow"])(send_now_handler)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ asyncio.run() –¥–ª—è –∑–∞–ø—É—Å–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
    asyncio.run(on_start())