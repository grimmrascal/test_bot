import asyncio
import logging
import random
import os
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from pytz import timezone
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

if not TOKEN:
    raise ValueError("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª .env.")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å –ö–∏—î–≤–∞
kyiv_tz = timezone("Europe/Kyiv")

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
conn = sqlite3.connect('users.db')
cursor = conn.cursor()

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER UNIQUE
                )''')
conn.commit()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def add_user(user_id):
    cursor.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
    conn.commit()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def remove_user(user_id):
    cursor.execute('DELETE FROM users WHERE user_id = ?', (user_id,))
    conn.commit()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def get_all_users():
    cursor.execute('SELECT user_id FROM users')
    return [row[0] for row in cursor.fetchall()]

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    add_user(message.from_user.id)
    await message.answer(f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}! –¢–∏ –¥–æ–¥–∞–Ω–∞ —É —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—Å–∏–ª–∫–∏.")
    logging.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –¥–æ–¥–∞–Ω–∏–π —É —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—Å–∏–ª–∫–∏.")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /sendnow –¥–ª—è –º–∏—Ç—Ç—î–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏
@dp.message(Command("sendnow"))
async def send_now_handler(message: types.Message):
    await send_random_messages()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –ø—Ä–∏—î–º–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def send_random_messages():
    messages = [
        "–¢–∏ —á—É–¥–æ–≤–∏–π!", "–ù–µ –∑–∞–±—É–≤–∞–π –ø–æ—Å–º—ñ—Ö–∞—Ç–∏—Å—è!", "–í —Ç–µ–±–µ –≤—Å–µ –≤–∏–π–¥–µ!", "–¢–∏ –æ—Å–æ–±–ª–∏–≤–∏–π!"
    ]
    images = [
        "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSDUZqyAjDc-cVBLEZ-ulHqYeNrLzvTyheolw&s",
        "https://i.pinimg.com/236x/8f/4b/5b/8f4b5b5adc5c25e6b54e91de257eb5bc.jpg",
        "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTjHIhkA1YZs-XYX1XfGPn_vbQNLkqxVK4Z1g&s",
        "https://lux.fm/uploads/640_DIR/media_news/2017/10/4e56b2abdbb88fb6b46f74850844fd2a94745d82.jpg?w=400&fit=cover&output=webp&q=85",
        "https://img.novosti-n.org/upload/ukraine/1146173.jpg",
        "https://st2.depositphotos.com/2927537/7025/i/450/depositphotos_70253417-stock-photo-funny-monkey-with-a-red.jpg",
        "https://st.depositphotos.com/1146092/4555/i/450/depositphotos_45550465-stock-photo-cocktail-dog.jpg",
        "https://static.nv.ua/shared/system/MediaPhoto/images/000/107/490/original/f7a5e08ed77f458574a589653bfe6d65.png?q=85&stamp=20211210195055&f=jpg",
        "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRSSlokAPuDGtjvJl-cHQ0QvOvyxSVh5ED3nA&s",
        "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQoSRIRImLia1fY1vzabQsfGEDFfYVXLi5q-w&s",
        "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQd6_ca5sSXIv9NvcMJTJL9NbeZlsg_Pi_2q2nDmmckhcpEucUrK5bragnlnPtDqg2l7kQ&usqp=CAU",
        "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRTXcTRddhiOgd0tBJILScBTzwQv_Ci4HT2NQ&s",
        "https://www.5.ua/media/pictures/original/196599.jpg?t=1601905263",
    ]

    for user_id in get_all_users():
        try:
            message = random.choice(messages)
            image = random.choice(images)
            await bot.send_photo(user_id, photo=image, caption=message)
            logging.info(f"üì® –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞—Ä—Ç–∏–Ω–∫–æ—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {user_id}")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ {user_id}: {e}")

# –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –æ–Ω–æ–≤–ª–µ–Ω—å (–¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
@dp.update()
async def all_updates_handler(update: types.Update):
    logging.info(f"üì• –û—Ç—Ä–∏–º–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {update}")

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏—Ö–æ–¥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —á–∞—Ç—É
@dp.chat_member()
async def chat_member_handler(update: types.ChatMemberUpdated):
    user_id = update.from_user.id
    new_status = update.new_chat_member.status

    if new_status in ["kicked", "left"]:
        remove_user(user_id)
        logging.info(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–∏–π—à–æ–≤ –∞–±–æ –±—É–≤ –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑ —á–∞—Ç—É.")

# –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –¥–ª—è —â–æ–¥–µ–Ω–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (2 —Ä–∞–∑–∏ –Ω–∞ –¥–µ–Ω—å)
scheduler = AsyncIOScheduler()
scheduler.add_job(send_random_messages, CronTrigger(hour=10, minute=0, timezone=kyiv_tz))  # 10:00
scheduler.add_job(send_random_messages, CronTrigger(hour=18, minute=0, timezone=kyiv_tz))  # 18:00

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
async def main():
    scheduler.start()  # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())