import asyncio
import logging
import requests
import sqlite3
import os
import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv
from aiogram.filters import Command

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
PIXABAY_API_KEY = os.getenv("PIXABAY_API_KEY")
DB_PATH = "users.db"

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
scheduler = AsyncIOScheduler()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É SQLite
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            first_name TEXT,
            username TEXT
        )
    """)
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –ë–î
async def add_user(user_id, first_name, username):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO users (user_id, first_name, username) VALUES (?, ?, ?)",
                   (user_id, first_name, username))
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —Ñ–æ—Ç–æ –∑ Pixabay
async def get_random_image():
    url = f"https://pixabay.com/api/?key={PIXABAY_API_KEY}&q=cute&image_type=photo&per_page=50"
    response = requests.get(url).json()
    if "hits" in response and response["hits"]:
        return random.choice(response["hits"])["webformatURL"]
    return None

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∏—î–º–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
def get_random_message():
    messages = [
        "–ù–µ—Ö–∞–π —Ç–≤—ñ–π –¥–µ–Ω—å –±—É–¥–µ —á—É–¥–æ–≤–∏–º! üòä",
        "–¢–∏ –Ω–µ–π–º–æ–≤—ñ—Ä–Ω–∏–π! üåü",
        "–ù–µ –∑–∞–±—É–≤–∞–π —É—Å–º—ñ—Ö–∞—Ç–∏—Å—è! üòÉ",
        "–°–≤—ñ—Ç –ø—Ä–µ–∫—Ä–∞—Å–Ω–∏–π, —ñ —Ç–∏ —Ç–∞–∫–æ–∂! üíñ",
    ]
    return random.choice(messages)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ —Ä–µ–∞–∫—Ü—ñ—è–º–∏
def get_reaction_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚ù§Ô∏è –ü–æ–¥–æ–±–∞—î—Ç—å—Å—è", callback_data="like"),
        InlineKeyboardButton("üîÑ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è", callback_data="share"),
        InlineKeyboardButton("‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–µ —Ñ–æ—Ç–æ", callback_data="next_photo")
    )
    return keyboard

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ —Ñ–æ—Ç–æ —Ç–∞ –ø—Ä–∏—î–º–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def send_photos():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()
    conn.close()
    
    for user in users:
        image_url = await get_random_image()
        text = get_random_message()
        if image_url:
            await bot.send_photo(user[0], image_url, caption=text, reply_markup=get_reaction_keyboard())
            await asyncio.sleep(0.5)

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await add_user(message.from_user.id, message.from_user.first_name, message.from_user.username)
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –±—É–¥—É –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Ç–æ–±—ñ –ø—Ä–∏—î–º–Ω—ñ —Ñ–æ—Ç–æ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è! üòä")

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–∞–∫—Ü—ñ–π
@dp.callback_query(lambda c: c.data in ["like", "share", "next_photo"])
async def process_callback(callback_query: CallbackQuery):
    if callback_query.data == "like":
        await bot.answer_callback_query(callback_query.id, text="‚ù§Ô∏è –î—è–∫—É—é –∑–∞ —Ä–µ–∞–∫—Ü—ñ—é!")
    elif callback_query.data == "share":
        await bot.answer_callback_query(callback_query.id, text="üîÑ –ü–æ–¥—ñ–ª–∏—Å—å —Ü–∏–º –∑ –¥—Ä—É–∑—è–º–∏!")
    elif callback_query.data == "next_photo":
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ —Ñ–æ—Ç–æ
        new_image_url = await get_random_image()
        if new_image_url:
            await bot.send_photo(callback_query.from_user.id, new_image_url, caption=get_random_message(), reply_markup=get_reaction_keyboard())
        await bot.answer_callback_query(callback_query.id)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    init_db()
    scheduler.add_job(send_photos, "interval", hours=6)  # –†–æ–∑—Å–∏–ª–∫–∞ –∫–æ–∂–Ω—ñ 6 –≥–æ–¥–∏–Ω
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())