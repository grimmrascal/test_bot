import os
import asyncio
import logging
import random
import requests
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReactionUpdated, DefaultBotProperties
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
PIXABAY_API_KEY = os.getenv("PIXABAY_API_KEY")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ SQLite
DB_PATH = "users.db"

def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE,
            first_name TEXT,
            username TEXT
        );
    """)
    conn.commit()
    conn.close()

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—É
def add_user(user_id, first_name, username):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
        INSERT OR IGNORE INTO users (user_id, first_name, username) 
        VALUES (?, ?, ?);
    """, (user_id, first_name, username))
    conn.commit()
    conn.close()

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ –∑ Pixabay
async def get_random_image():
    query = random.choice(["cute animals", "nature", "happy", "cozy", "love"])  # –¢–µ–º–∏
    url = f"https://pixabay.com/api/?key={PIXABAY_API_KEY}&q={query}&image_type=photo&per_page=50"
    response = requests.get(url).json()
    if "hits" in response and response["hits"]:
        return random.choice(response["hits"])["webformatURL"]
    return None

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ø—Ä–∏—î–º–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
def get_random_message():
    messages = [
        "–ù–µ—Ö–∞–π —Ü–µ–π –¥–µ–Ω—å –±—É–¥–µ –Ω–∞–π–∫—Ä–∞—â–∏–º –¥–ª—è —Ç–µ–±–µ! üòä",
        "–¢–∏ —á—É–¥–æ–≤–∞ –ª—é–¥–∏–Ω–∞! üåü",
        "–°—å–æ–≥–æ–¥–Ω—ñ ‚Äì —á—É–¥–æ–≤–∏–π –¥–µ–Ω—å, —â–æ–± –ø–æ—Å–º—ñ—Ö–Ω—É—Ç–∏—Å—è! üòÑ",
        "–ù–µ –∑–∞–±—É–≤–∞–π, —â–æ —Ç–∏ –Ω–µ–π–º–æ–≤—ñ—Ä–Ω–∏–π! ‚ù§Ô∏è",
        "–©–∞—Å—Ç—è –ø–æ—Ä—É—á, –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–∫—Ä–∏–π –¥–ª—è –Ω—å–æ–≥–æ —Å–µ—Ä—Ü–µ! üí´"
    ]
    return random.choice(messages)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(Command("start"))
async def start_handler(message: Message):
    add_user(message.from_user.id, message.from_user.first_name, message.from_user.username)
    await message.answer("–í—ñ—Ç–∞—é! –Ø –Ω–∞–¥—Å–∏–ª–∞—Ç–∏–º—É —Ç–æ–±—ñ –≤–∏–ø–∞–¥–∫–æ–≤—ñ —Ñ–æ—Ç–æ —Ç–∞ –º–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

# –§—É–Ω–∫—Ü—ñ—è —Ä–æ–∑—Å–∏–ª–∫–∏
async def send_photos():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()
    conn.close()
    
    for user in users:
        image_url = await get_random_image()
        text = get_random_message()
        if image_url:
            await bot.send_photo(user[0], image_url, caption=text)
            await asyncio.sleep(0.5)  # –£–Ω–∏–∫–Ω–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—É

# –†–µ–∞–∫—Ü—ñ—è –Ω–∞ —Ä–µ–∞–∫—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@dp.reaction()
async def reaction_handler(update: ReactionUpdated):
    user_id = update.user.id
    reaction = update.new_reaction  # –ù–æ–≤—ñ —Ä–µ–∞–∫—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await bot.send_message(user_id, f"–î—è–∫—É—é –∑–∞ —Ä–µ–∞–∫—Ü—ñ—é {reaction}!")

# –ó–∞–ø—É—Å–∫ —à–µ–¥—É–ª–µ—Ä–∞
async def main():
    init_db()
    scheduler.add_job(send_photos, "interval", hours=6)  # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ–∂–Ω—ñ 6 –≥–æ–¥–∏–Ω
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())