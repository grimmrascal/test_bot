import asyncio
import logging
import random
import os
import sqlite3
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from pytz import timezone
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
PIXABAY_API_KEY = os.getenv("PIXABAY_API_KEY")

if not TOKEN:
    raise ValueError("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª .env.")
if not PIXABAY_API_KEY:
    raise ValueError("‚ùå API-–∫–ª—é—á Pixabay –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª .env.")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å –ö–∏—î–≤–∞
kyiv_tz = timezone("Europe/Kyiv")

# –°–ø–∏—Å–æ–∫ Telegram user_id –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –±–æ—Ç–∞
ADMIN_USER_IDS = [471637263, 5142786008]  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–ª—å–Ω–∏—Ö user_id

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
conn = sqlite3.connect('users.db')
cursor = conn.cursor()

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER UNIQUE,
                    username TEXT,
                    first_name TEXT
                )''')
conn.commit()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –∫–Ω–æ–ø–∫–∞–º–∏
def create_reaction_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ù§Ô∏è", callback_data="reaction:like"),
            InlineKeyboardButton(text="üîÑ", callback_data="reaction:new_photo"),
        ]
    ])
    return keyboard

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def add_user(user_id, username, first_name):
    cursor.execute('''
        INSERT OR IGNORE INTO users (user_id, username, first_name)
        VALUES (?, ?, ?)
    ''', (user_id, username, first_name))
    conn.commit()
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    for admin_id in ADMIN_USER_IDS:
        asyncio.create_task(bot.send_message(
            admin_id,
            f"‚úÖ –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–æ–¥–∞–Ω–∏–π:\nID: {user_id}\n–Ü–º'—è: {first_name}\n–ù—ñ–∫–Ω–µ–π–º: @{username if username else '–Ω–µ–º–∞—î'}"
        ))

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def remove_user(user_id):
    cursor.execute('SELECT username, first_name FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    cursor.execute('DELETE FROM users WHERE user_id = ?', (user_id,))
    conn.commit()
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user:
        username, first_name = user
        for admin_id in ADMIN_USER_IDS:
            asyncio.create_task(bot.send_message(
                admin_id,
                f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–¥–∞–ª–µ–Ω–∏–π:\nID: {user_id}\n–Ü–º'—è: {first_name}\n–ù—ñ–∫–Ω–µ–π–º: @{username if username else '–Ω–µ–º–∞—î'}"
            ))

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def get_all_users():
    cursor.execute('SELECT user_id, username, first_name FROM users')
    return cursor.fetchall()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞ —Ç–µ–º–æ—é
def get_random_image(query="funny, kids, sunset, motivation"):
    url = f"https://pixabay.com/api/?key={PIXABAY_API_KEY}&q={query}&image_type=photo&per_page=50"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        if data["hits"]:
            return random.choice(data["hits"])["webformatURL"]
    return None

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name

    add_user(user_id, username, first_name)
    await message.answer(f"–ü—Ä–∏–≤—ñ—Ç, {first_name}! –¢–∏ –¥–æ–¥–∞–Ω–∞ —É —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—Å–∏–ª–∫–∏.")
    logging.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} ({username}) –¥–æ–¥–∞–Ω–∏–π —É —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—Å–∏–ª–∫–∏.")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /sendnow –¥–ª—è –º–∏—Ç—Ç—î–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏
@dp.message(Command("sendnow"))
async def send_now_handler(message: types.Message):
    if message.from_user.id in ADMIN_USER_IDS:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
        await send_random_messages()
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /get_users –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —É—á–∞—Å–Ω–∏–∫—ñ–≤
@dp.message(Command("get_users"))
async def get_users_handler(message: types.Message):
    if message.from_user.id in ADMIN_USER_IDS:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
        users = get_all_users()
        if users:
            user_list = "\n".join([f"ID: {user[0]}, –Ü–º'—è: {user[2]}, –ù—ñ–∫–Ω–µ–π–º: @{user[1] if user[1] else '–Ω–µ–º–∞—î'}" for user in users])
            await message.answer(f"üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤:\n{user_list}")
        else:
            await message.answer("‚ùå –°–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /add_user –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@dp.message(Command("add_user"))
async def add_user_handler(message: types.Message):
    if message.from_user.id in ADMIN_USER_IDS:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
        try:
            # –†–æ–∑–¥—ñ–ª—è—î–º–æ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–∏ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            command_parts = message.text.split(maxsplit=3)
            if len(command_parts) < 4:
                await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /add_user <user_id> <username> <first_name>")
                return

            user_id = int(command_parts[1])
            username = command_parts[2]
            first_name = command_parts[3]

            # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            add_user(user_id, username, first_name)
            await message.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–æ–¥–∞–Ω–∏–π:\nID: {user_id}\n–Ü–º'—è: {first_name}\n–ù—ñ–∫–Ω–µ–π–º: @{username}")
        except ValueError:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. user_id –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
        except Exception as e:
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –ø—Ä–∏—î–º–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def send_random_messages():
    messages = [
        "–¢–∏ —á—É–¥–æ–≤–∏–π!", "–ù–µ –∑–∞–±—É–≤–∞–π –ø–æ—Å–º—ñ—Ö–∞—Ç–∏—Å—è!", "–í —Ç–µ–±–µ –≤—Å–µ –≤–∏–π–¥–µ!", "–¢–∏ –æ—Å–æ–±–ª–∏–≤–∏–π!"
    ]

    for user_id, username, first_name in get_all_users():
        try:
            message = random.choice(messages)
            image = get_random_image(query="motivation")  # –ó–∞–¥–∞–π—Ç–µ —Ç–µ–º—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "motivation"
            if image:
                await bot.send_photo(
                    user_id,
                    photo=image,
                    caption=message,
                    reply_markup=create_reaction_keyboard()  # –î–æ–¥–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
                )
                logging.info(f"üì® –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞—Ä—Ç–∏–Ω–∫–æ—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {user_id}")
            else:
                logging.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ Pixabay.")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ {user_id}: {e}")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /t –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
@dp.message(Command("t"))
async def broadcast_handler(message: types.Message):
    if message.from_user.id in ADMIN_USER_IDS:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –ø—ñ–¥–ø–∏—Å –¥–æ —Ñ–æ—Ç–æ
            if message.caption:  # –Ø–∫—â–æ —î –ø—ñ–¥–ø–∏—Å –¥–æ —Ñ–æ—Ç–æ
                broadcast_message = " ".join(message.caption.split()[1:])
            elif message.text:  # –Ø–∫—â–æ —î —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏
                broadcast_message = " ".join(message.text.split()[1:])
            else:  # –Ø–∫—â–æ –Ω–µ–º–∞—î —Ç–µ–∫—Å—Ç—É –∞–±–æ –ø—ñ–¥–ø–∏—Å—É
                broadcast_message = None

            users = get_all_users()  # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤

            if not users:
                await message.answer("‚ùå –ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.")
                return

            # –†–æ–∑—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–∂–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É, –∫—Ä—ñ–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —è–∫–∏–π –π–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–∏–≤
            for user_id, username, first_name in users:
                if user_id == message.from_user.id:  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —è–∫–∏–π –≤—ñ–¥–ø—Ä–∞–≤–∏–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    continue
                try:
                    if message.photo:  # –Ø–∫—â–æ —î —Ñ–æ—Ç–æ
                        await bot.send_photo(user_id, photo=message.photo[-1].file_id, caption=broadcast_message)
                    elif broadcast_message:  # –Ø–∫—â–æ —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç
                        await bot.send_message(user_id, broadcast_message)
                    logging.info(f"üì® –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
                except Exception as e:
                    logging.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")

            await message.answer("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑—ñ—Å–ª–∞–Ω–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º, –∫—Ä—ñ–º –≤–∞—Å!")
        except IndexError:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /t <—Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è> –∞–±–æ –ø—Ä–∏–∫—Ä—ñ–ø—ñ—Ç—å —Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º.")
        except Exception as e:
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑—Å–∏–ª—Ü—ñ: {e}")
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")

# –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query()
async def handle_reaction(callback_query: types.CallbackQuery):
    data = callback_query.data  # –û—Ç—Ä–∏–º—É—î–º–æ callback_data
    user_id = callback_query.from_user.id

    if data == "reaction:like":
        await callback_query.answer("‚ù§Ô∏è –î—è–∫—É—é –∑–∞ —Å–µ—Ä–¥–µ—á–∫–æ!")
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '–°–µ—Ä–¥–µ—á–∫–æ'.")
    elif data == "reaction:new_photo":
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ —Ñ–æ—Ç–æ
        new_image = get_random_image(query="motivation")
        if new_image:
            await bot.send_photo(
                user_id,
                photo=new_image,
                caption="–û—Å—å –Ω–æ–≤–µ —Ñ–æ—Ç–æ –¥–ª—è —Ç–µ–±–µ!",
                reply_markup=create_reaction_keyboard()
            )
        await callback_query.answer("üîÑ –û—Å—å –Ω–æ–≤–µ —Ñ–æ—Ç–æ!")
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–ø—Ä–æ—Å–∏–≤ –Ω–æ–≤–µ —Ñ–æ—Ç–æ.")

# –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –¥–ª—è —â–æ–¥–µ–Ω–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (2 —Ä–∞–∑–∏ –Ω–∞ –¥–µ–Ω—å)
scheduler = AsyncIOScheduler()
scheduler.add_job(send_random_messages, CronTrigger(hour=18, minute=0, timezone=kyiv_tz))  # 18:00

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
async def main():
    scheduler.start()  # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
