import asyncio
import logging
import random
import os
import requests
import psycopg2
from psycopg2.extras import RealDictCursor
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Router
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from pytz import timezone
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
PIXABAY_API_KEY = os.getenv("PIXABAY_API_KEY")
DATABASE_URL = os.getenv("DATABASE_URL")

if not TOKEN:
    raise ValueError("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª .env.")
if not PIXABAY_API_KEY:
    raise ValueError("‚ùå API-–∫–ª—é—á Pixabay –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª .env.")
if not DATABASE_URL:
    raise ValueError("‚ùå URL –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª .env.")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Router
router = Router()
dp.include_router(router)

# –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å –ö–∏—î–≤–∞
kyiv_tz = timezone("Europe/Kyiv")

# –°–ø–∏—Å–æ–∫ Telegram user_id –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –±–æ—Ç–∞
ADMIN_USER_IDS = [471637263, 5142786008, 646146668]  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–ª—å–Ω–∏—Ö user_id

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö PostgreSQL
conn = psycopg2.connect(DATABASE_URL, sslmode="require")
cursor = conn.cursor(cursor_factory=RealDictCursor)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        user_id BIGINT UNIQUE NOT NULL,
        username TEXT,
        first_name TEXT
    )
''')
conn.commit()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –∫–Ω–æ–ø–∫–∞–º–∏
def create_reaction_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ù§Ô∏è", callback_data="reaction:like"),
            InlineKeyboardButton(text="üîÑ", callback_data="reaction:new_photo"),
        ]
    ])
    return keyboard

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def add_user(user_id, username, first_name):
    try:
        cursor.execute('''
            INSERT INTO users (user_id, username, first_name)
            VALUES (%s, %s, %s)
            ON CONFLICT (user_id) DO NOTHING
        ''', (user_id, username, first_name))
        conn.commit()
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –¥–æ–¥–∞–Ω–∏–π –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")
    except Exception as e:
        conn.rollback()  # –°–∫–∞—Å–æ–≤—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def remove_user(user_id):
    try:
        cursor.execute('DELETE FROM users WHERE user_id = %s', (user_id,))
        conn.commit()
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–∏–¥–∞–ª–µ–Ω–∏–π —ñ–∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")
    except Exception as e:
        conn.rollback()  # –°–∫–∞—Å–æ–≤—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def get_all_users():
    try:
        cursor.execute('SELECT user_id, username, first_name FROM users')
        return cursor.fetchall()
    except Exception as e:
        conn.rollback()  # –°–∫–∞—Å–æ–≤—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
        return []

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞ —Ç–µ–º–æ—é
def get_random_image(query="funny, kids, sunset, motivation"):
    url = f"https://pixabay.com/api/?key={PIXABAY_API_KEY}&q={query}&image_type=photo&per_page=50"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        if data["hits"]:
            return random.choice(data["hits"])["webformatURL"]
    return None

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name

    add_user(user_id, username, first_name)
    await message.answer(f"–ü—Ä–∏–≤—ñ—Ç, {first_name}! –¢–∏ –¥–æ–¥–∞–Ω–∞ —É —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—Å–∏–ª–∫–∏.")
    logging.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} ({username}) –¥–æ–¥–∞–Ω–∏–π —É —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—Å–∏–ª–∫–∏.")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /sendnow –¥–ª—è –º–∏—Ç—Ç—î–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏
@dp.message(Command("sendnow"))
async def send_now_handler(message: types.Message):
    if message.from_user.id in ADMIN_USER_IDS:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
        await send_random_messages()
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /t –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ —Ç–µ–∫—Å—Ç—É –∞–±–æ —Ñ–æ—Ç–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º, –∫—Ä—ñ–º –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞
@dp.message(Command("t"))
async def broadcast_handler(message: types.Message):
    if message.from_user.id in ADMIN_USER_IDS:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
        try:
            users = get_all_users()  # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤

            if not users:
                await message.answer("‚ùå –ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.")
                return

            # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º—ñ—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ
            if message.photo:
                photo_id = message.photo[-1].file_id  # –ù–∞–π–∫—Ä–∞—â–∞ —è–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ
                caption = message.caption  # –û—Ç—Ä–∏–º—É—î–º–æ –ø—ñ–¥–ø–∏—Å (None, —è–∫—â–æ –Ω–µ–º–∞—î)

                for user in users:
                    if user['user_id'] == message.from_user.id:
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞

                    try:
                        await bot.send_photo(
                            chat_id=user['user_id'],
                            photo=photo_id,
                            caption=caption  # –î–æ–¥–∞—î–º–æ –ª–∏—à–µ –ø—ñ–¥–ø–∏—Å, —è–∫—â–æ —î
                        )
                        logging.info(f"üì® –§–æ—Ç–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user['user_id']}")
                    except Exception as e:
                        logging.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user['user_id']}: {e}")

                await message.answer("‚úÖ –§–æ—Ç–æ —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑—ñ—Å–ª–∞–Ω–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º!")
                return  # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é, —â–æ–± –Ω–µ –æ–±—Ä–æ–±–ª—è—Ç–∏ —Ç–µ–∫—Å—Ç –¥–∞–ª—ñ

            # –Ø–∫—â–æ —Ñ–æ—Ç–æ –Ω–µ–º–∞—î, —Ä–æ–∑—Å–∏–ª–∞—î–º–æ –ª–∏—à–µ —Ç–µ–∫—Å—Ç (–±–µ–∑ –∫–æ–º–∞–Ω–¥–∏ "/t")
            command_parts = message.text.split(maxsplit=1)
            if len(command_parts) < 2:
                await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /t <—Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è>.")
                return

            broadcast_message = command_parts[1]  # –ë–µ—Ä–µ–º–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–æ–º–∞–Ω–¥–∏

            for user in users:
                if user['user_id'] == message.from_user.id:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞

                try:
                    await bot.send_message(user['user_id'], broadcast_message)
                    logging.info(f"üì® –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user['user_id']}")
                except Exception as e:
                    logging.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user['user_id']}: {e}")

            await message.answer("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑—ñ—Å–ª–∞–Ω–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º!")

        except Exception as e:
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑—Å–∏–ª—Ü—ñ: {e}")
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")


        
# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /get_users –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —É—á–∞—Å–Ω–∏–∫—ñ–≤
@dp.message(Command("get_users"))
async def get_users_handler(message: types.Message):
    if message.from_user.id in ADMIN_USER_IDS:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
        users = get_all_users()
        if users:
            user_list = "\n".join([f"ID: {user['user_id']}, –Ü–º'—è: {user['first_name']}, –ù—ñ–∫–Ω–µ–π–º: @{user['username'] if user['username'] else '–Ω–µ–º–∞—î'}" for user in users])
            await message.answer(f"üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤:\n{user_list}")
        else:
            await message.answer("‚ùå –°–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /add_user –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@dp.message(Command("add_user"))
async def add_user_handler(message: types.Message):
    if message.from_user.id in ADMIN_USER_IDS:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
        try:
            # –†–æ–∑–¥—ñ–ª—è—î–º–æ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–∏ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
            command_parts = message.text.split(maxsplit=1)
            if len(command_parts) < 2:
                await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /add_user <user_id>")
                return

            # –û—Ç—Ä–∏–º—É—î–º–æ user_id
            user_id = int(command_parts[1])

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î
            cursor.execute('SELECT * FROM users WHERE user_id = %s', (user_id,))
            existing_user = cursor.fetchone()
            if existing_user:
                await message.answer(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ–∑ ID {user_id} –≤–∂–µ —ñ—Å–Ω—É—î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.")
                return

            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ Telegram API
            try:
                user = await bot.get_chat(user_id)
                username = user.username if user.username else "–Ω–µ–º–∞—î"
                first_name = user.first_name if user.first_name else "–Ω–µ–º–∞—î"
            except Exception as e:
                await message.answer(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {user_id}: {e}")
                return

            # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            add_user(user_id, username, first_name)
            await message.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–æ–¥–∞–Ω–∏–π:\nID: {user_id}\n–Ü–º'—è: {first_name}\n–ù—ñ–∫–Ω–µ–π–º: @{username}")
        except ValueError:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. user_id –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
        except Exception as e:
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /remove_user –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@dp.message(Command("remove_user"))
async def remove_user_handler(message: types.Message):
    if message.from_user.id in ADMIN_USER_IDS:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
        try:
            # –†–æ–∑–¥—ñ–ª—è—î–º–æ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–∏ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
            command_parts = message.text.split(maxsplit=1)
            if len(command_parts) < 2:
                await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /remove_user <user_id>")
                return

            # –û—Ç—Ä–∏–º—É—î–º–æ user_id
            user_id = int(command_parts[1])

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î
            cursor.execute('SELECT * FROM users WHERE user_id = %s', (user_id,))
            existing_user = cursor.fetchone()
            if not existing_user:
                await message.answer(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.")
                return

            # –í–∏–¥–∞–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            remove_user(user_id)
            await message.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ–∑ ID {user_id} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π.")
        except ValueError:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. user_id –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
        except Exception as e:
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")

@router.callback_query(lambda callback: callback.data.startswith("reaction:"))
async def reaction_handler(callback: types.CallbackQuery):
    if callback.data == "reaction:like":
        await callback.answer("‚ù§Ô∏è –î—è–∫—É—é –∑–∞ —Ç–≤–æ—é —Ä–µ–∞–∫—Ü—ñ—é!")
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} –Ω–∞—Ç–∏—Å–Ω—É–≤ ‚ù§Ô∏è")
    elif callback.data == "reaction:new_photo":
        await callback.answer("üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –Ω–æ–≤–µ —Ñ–æ—Ç–æ...")
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–≤ –Ω–æ–≤–µ —Ñ–æ—Ç–æ")

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–æ–≤–µ —Ñ–æ—Ç–æ
        image = get_random_image(query="motivation")
        if image:
            await bot.send_photo(
                callback.from_user.id,
                photo=image,
                caption="–û—Å—å –Ω–æ–≤–µ —Ñ–æ—Ç–æ –¥–ª—è –≤–∞—Å!",
                reply_markup=create_reaction_keyboard()
            )
        else:
            await callback.message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–µ —Ñ–æ—Ç–æ.")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –ø—Ä–∏—î–º–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def send_random_messages():
    messages = [
        "–¢–∏ —á—É–¥–æ–≤–∏–π!", "–ù–µ –∑–∞–±—É–≤–∞–π –ø–æ—Å–º—ñ—Ö–∞—Ç–∏—Å—è!", "–í —Ç–µ–±–µ –≤—Å–µ –≤–∏–π–¥–µ!", "–¢–∏ –æ—Å–æ–±–ª–∏–≤–∏–π!"
    ]

    for user in get_all_users():
        try:
            message = random.choice(messages)
            image = get_random_image(query="motivation")
            if image:
                await bot.send_photo(
                    user['user_id'],
                    photo=image,
                    caption=message,
                    reply_markup=create_reaction_keyboard()
                )
                logging.info(f"üì® –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞—Ä—Ç–∏–Ω–∫–æ—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {user['user_id']}")
            else:
                logging.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ Pixabay.")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ {user['user_id']}: {e}")

# –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –¥–ª—è —â–æ–¥–µ–Ω–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
scheduler = AsyncIOScheduler()
scheduler.add_job(send_random_messages, CronTrigger(hour=18, minute=0, timezone=kyiv_tz))

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
async def main():
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
