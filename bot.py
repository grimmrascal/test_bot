import logging
import os
import random
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from dotenv import load_dotenv
import requests
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncio

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –∑ .env —Ñ–∞–π–ª—É
load_dotenv()

# –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
PIXABAY_API_KEY = os.getenv("PIXABAY_API_KEY")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±'—î–∫—Ç—ñ–≤ Bot —ñ Dispatcher
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher.from_entry(bot)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ from_entry() –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Dispatcher

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ SQLite –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def init_db():
    conn = sqlite3.connect('user.db')
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                        user_id INTEGER PRIMARY KEY,
                        username TEXT,
                        full_name TEXT
                    )''')
    conn.commit()
    conn.close()

# –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
def add_user_to_db(user_id, username, full_name):
    conn = sqlite3.connect('user.db')
    cursor = conn.cursor()
    cursor.execute('INSERT OR IGNORE INTO users (user_id, username, full_name) VALUES (?, ?, ?)', 
                   (user_id, username, full_name))
    conn.commit()
    conn.close()

# –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–µ —Ñ–æ—Ç–æ –∑ Pixabay API
def get_random_photo():
    url = f"https://pixabay.com/api/?key={PIXABAY_API_KEY}&q=nature&image_type=photo&per_page=10"
    response = requests.get(url)
    data = response.json()
    hits = data.get('hits', [])
    if hits:
        return random.choice(hits)['webformatURL']
    return None

# –ö–Ω–æ–ø–∫–∏
def get_inline_buttons():
    keyboard = InlineKeyboardMarkup(row_width=2)
    like_button = InlineKeyboardButton("üëç Like", callback_data="like")
    wow_button = InlineKeyboardButton("üò≤ Wow", callback_data="wow")
    keyboard.add(like_button, wow_button)
    return keyboard

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name

    # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    add_user_to_db(user_id, username, full_name)

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–µ —Ñ–æ—Ç–æ
    photo_url = get_random_photo()

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏
    if photo_url:
        await message.answer_photo(photo_url, caption="–û—Å—å —Ç–≤–æ—î –≤–∏–ø–∞–¥–∫–æ–≤–µ —Ñ–æ—Ç–æ!", reply_markup=get_inline_buttons())
    else:
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–æ—Ç–æ.")

# –û–±—Ä–æ–±–Ω–∏–∫ callback query (—Ä–µ–∞–∫—Ü—ñ—ó –Ω–∞ –∫–Ω–æ–ø–∫–∏)
@dp.callback_query_handler(lambda c: c.data in ["like", "wow"])
async def handle_reaction(callback_query: types.CallbackQuery):
    reaction = callback_query.data
    user_id = callback_query.from_user.id
    # –ó–∞–ø–∏—Å—É—î–º–æ —Ä–µ–∞–∫—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö —á–∏ —ñ–Ω—à–µ –º—ñ—Å—Ü–µ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await bot.answer_callback_query(callback_query.id, text=f"–¢–∏ –Ω–∞—Ç–∏—Å–Ω—É–≤ {reaction}")
    await bot.send_message(user_id, f"–¢–∏ –≤–∏–±—Ä–∞–≤ —Ä–µ–∞–∫—Ü—ñ—é: {reaction}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–∏—Ç—Ç—î–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏
@dp.message_handler(commands=["sendnow"])
async def sendnow_handler(message: types.Message):
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ —Ñ–æ—Ç–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º, —è–∫—ñ —î –≤ –±–∞–∑—ñ
    conn = sqlite3.connect('user.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM users')
    users = cursor.fetchall()
    conn.close()

    for user in users:
        user_id = user[0]
        photo_url = get_random_photo()
        if photo_url:
            await bot.send_photo(user_id, photo_url, caption="–¶–µ —Ç–≤–æ—î –Ω–æ–≤–µ —Ñ–æ—Ç–æ!")
        else:
            await bot.send_message(user_id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–æ—Ç–æ.")

# –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∫–æ–∂–Ω—ñ 30 —Ö–≤–∏–ª–∏–Ω
async def scheduled_send_photos():
    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_photos, 'interval', minutes=30)
    scheduler.start()

async def send_photos():
    conn = sqlite3.connect('user.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM users')
    users = cursor.fetchall()
    conn.close()

    for user in users:
        user_id = user[0]
        photo_url = get_random_photo()
        if photo_url:
            await bot.send_photo(user_id, photo_url, caption="–¶–µ —Ç–≤–æ—î –≤–∏–ø–∞–¥–∫–æ–≤–µ —Ñ–æ—Ç–æ!")
        else:
            await bot.send_message(user_id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–æ—Ç–æ.")

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
async def on_start():
    init_db()
    await scheduled_send_photos()
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(on_start())